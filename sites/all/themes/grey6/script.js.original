Drupal.behaviors.readonly = function(context){
    
	$('input[readonly]').addClass('readonly').focus(function(){
		$(this).blur();
	});

}
 
Drupal.behaviors.noColons = function(context){
    $('form label[class!="option"]').each(
        function() {
       var myText = $(this);
       myText.text( myText.text().replace(':','') );
     }
   );
}

//set tab index for the page
Drupal.behaviors.indexSet = function(context){
	
	var tabindex = 1;
		$('.node input, .node select').each(function() {
			if ($(this).attr('type') != "hidden" && !$(this).attr('readonly')) {
				
				//console.log( $(this).attr('readonly') );
				$(this).attr("tabindex", tabindex);
				tabindex++;
			}
		});
	
}


//disable form submit
Drupal.behaviors.submitCheck = function(context){
	
	$('#node-3 #edit-submit').click(function(){
		var n = $("#node-3 input:checked, #node-3 input:radio:checked").length;
		if(n == 3){
			return true;
		}else{
			return false;
		}
	});
	
	$("#node-3 input:checkbox, #node-3 input:radio").click(function(){
		checkCheckboxCheck();
	});
	
	checkCheckboxCheck();

}

Drupal.behaviors.addOne = function(context){
	if($("#edit-submitted-oils-oil-fieldset-total-litres-wrapper").length != 0){
		$("#edit-submitted-oils-oil-fieldset-total-litres-wrapper").find('label').html('Oil<sup>1</sup>');
	}
	
}
    
Drupal.behaviors.defLists = function(context){
	if($(".node dl dt").length != 0){
		$(".node dl dd").hide();
		
		$(".node dl dt").click(function(){
			$(this).next('dd').slideToggle();
		});
		
	}
	
}


/**
 * The other functions for the form
 **/

function checkCheckboxCheck() {
	var n = $("#node-3 input:checked, #node-3 input:radio:checked").length;
	if(n == 3){
		$('#node-3 #edit-submit').removeAttr('disabled').removeClass('submit-disabled');
		return true;
	}else{
		$('#node-3 #edit-submit').addClass('submit-disabled').attr('disabled','disabled').attr('alt','You must select the choices above before submitting this form');
	}
}

function do_hidden_update() {
	var customField = $(".custom-size-fieldset").size();

	/* Cycle through all the 4 custom field entries and create a delimited string and then insert into hidden form values */
	var sizes = "";
	var entries = "";
	var rates = "";
	var remits = "";

	$(".liter-size-input").each( function () {
		sizes += $(this).val().replace(' Litres','') + ";";
		$("#edit-submitted-custom-size").val(sizes);
	});
	$(".number-of-entries").each( function () {
		entries += $(this).val() + ";";
		$("#edit-submitted-custom-size-number-of-cans-bottles").val(entries);
	});
	$(".each-rate").each( function () {
		rates += $(this).val() + ";";
		$("#edit-submitted-custom-size-rate").val(rates);
	});
	$(".total-remittance").each( function () {
		remits += $(this).val() + ";";
		$("#edit-submitted-custom-size-remittance").val(remits);
	});

	// if (customField == 0) {
	// 	$("#edit-submitted-custom-size").val("");
	// 	$("#edit-submitted-custom-size-number-of-cans-bottles").val("");
	// 	$("#edit-submitted-custom-size-rate").val("");
	// 	$("#edit-submitted-custom-size-remittance").val("");
	// }
	do_totals();

}

//calculate totals
function do_totals() {
	
	//
	// calculate subtotal
	//
	var subTotal = 0;
	for (var field in fieldsArray) {
		//take out commas
		$("#" + fieldsArray[field] + "-remittance").cleannum();

		//add to subtotal variable
		if ($("#" + fieldsArray[field] + "-remittance").val() != '') {
			//console.log("decomma'd: " + $("#" + fieldsArray[field] + "-remittance").val());
			subTotal = parseFloat(subTotal) + parseFloat($("#" + fieldsArray[field] + "-remittance").val());
			//console.log("parsed:" + parseFloat($("#" + fieldsArray[field] + "-remittance").val()) );
		}
		//put commas back
		$("#" + fieldsArray[field] + "-remittance").digits();
	}
	if (check_decimals(subTotal, 2, 9999)) {
		subTotal = roundNumber(subTotal, 2);
	}
	subTotal = numberToFixed(subTotal, 2);
	//put commas in
	$("#edit-submitted-totals-subtotal").val(subTotal).digits();


	//
	//	calculate tax
	//
	
	//check if override is allowed
	var override = ($('body.total-override').length > 0)? true : false;
	
	var taxCharged = 0;	
	if(override){
		var apptax = ($('#edit-submitted-totals-tax-applicable-sales').cleannum().val() == "")? 0 : parseFloat($('#edit-submitted-totals-tax-applicable-sales').cleannum().val());
		taxCharged =  apptax * parseFloat($("#edit-submitted-totals-tax-rate").val());
	}else{	
		taxCharged = subTotal * parseFloat($("#edit-submitted-totals-tax-rate").val());
	}	
	if (check_decimals(taxCharged, 2, 9999)) {
		taxCharged = roundNumber(taxCharged, 2);
	}
	taxCharged = numberToFixed(taxCharged, 2);
	$("#edit-submitted-totals-tax").val(taxCharged).digits();

	var adminfees = ($('#edit-submitted-totals-interest-admin-fees').cleannum().val() == "")? 0 : parseFloat($('#edit-submitted-totals-interest-admin-fees').cleannum().val());

	var total = parseFloat(taxCharged) + parseFloat(subTotal) + adminfees;
	if (check_decimals(total, 2, 9999)) {
		total = roundNumber(total, 2);
	}
	total = numberToFixed(total, 2);
	$("#edit-submitted-totals-total").val('$'+total).digits();
	
	//fix the others
	$('#edit-submitted-totals-interest-admin-fees, #edit-submitted-totals-tax-applicable-sales').digits();
	
}

function add_field(type){
//	var customField = $(".custom-size-fieldset").size();
//	  customField++;
	var customField = getCustomField(type);
	
	var qt = "'";
	var html = '<div id="custom-div-new-' + customField + '" class="add-new-fieldset"><fieldset class="webform-component-fieldset-custom-set"><input type="text" name="liter-size-' + customField + '" id="custom-field-' + customField + '-size" class="liter-size-input-input" /><span class="add-new-item-desc">Add numerical values in litres only (i.e. "15", "0.5").</span><input onclick="add_field_run(' + qt + customField + qt + ');" type="button" value="add" class="add-new-item-button"/></fieldset></div>';
	$("#webform-component-containers").append(html);
	// if(type = 'glycol'){
	// 	
	// }
	// $("#webform-component-containers---another-size").before(html);
	$("#custom-field-" + customField + "-size").focus();
	Drupal.attachBehaviors($("#webform-component-containers"));


	return false;
}

function add_field_run(customField) {
    $('#custom-field-' + customField + '-size').cleannum();
    var user_input = $('#custom-field-' + customField + '-size').attr('value');
    if (user_input > 0) {
        $('#custom-div-new-' + customField).remove();
        add_field_item(user_input);
    } else {
			return false;
    }
}

function blur(customField){
var quant = $('#custom-field-' + customField + '-entries').cleannum().val();
//console.log('quantity: ' + quant);
var rate = $('#custom-field-' + customField + '-rate').val();
var total = quant * rate;
$('#custom-field-' + customField + '-remittance').val(total).digits();

$('#custom-field-' + customField + '-entries').digits();

}

function add_field_item(user_input) {
	// var customField = $(".custom-size-fieldset").size();
	// console.log(customField);
	// customField++;
	var customField = getCustomField();
	
	
	//console.log(customField);

	var currentProvince = $("#edit-submitted-province-select-province").val();
  var currentPArray = pRates[currentProvince];
  var computed_input = user_input * currentPArray[4];
	
	
	
	
	var qt = "'";

	var html = '<fieldset id="custom-div-' + customField + '" class="custom-size-fieldset webform-component-fieldset"><a href="#" class="customDel" title="click to remove the ' + user_input + ' Liter size">x</a><input readonly="readonly" type="text" value="' + user_input +' Litres" name="liter-size-' + customField + '" id="custom-field-' + customField + '-size" class="liter-size-input" /><input onblur="blur(' + qt + customField + qt + ')" type="text"  name="custom-field-' + customField + '-entries" id="custom-field-' + customField + '-entries" class="number-of-entries" /><input value="' + computed_input +'" readonly="readonly" type="text" readonly name="each-' + customField + '-rate" id="custom-field-' + customField + '-rate" class="each-rate" /><div style="display:inline;margin:1px 5px 2px 0"><span class="field-suffix">/ea</span></div><input value="âˆ’" readonly="readonly" type="text" readonly name="total-' + customField + '-remittance" id="custom-field-' + customField + '-remittance" class="total-remittance" /></fieldset>';	
	$("#webform-component-containers").append(html);

	//nice rates
	$('#custom-field-' + customField + '-rate').niceRates();
	//reset tab index
	Drupal.attachBehaviors($("#webform-component-containers"));

	fieldsArray.push( 'custom-field-' + customField );

	/* Now implement the new inputs */
	$("#custom-field-" + customField + "-size").change( function () {
		var size = parseFloat($(this).val());
		if (size > 0) {
			var currentProvince = $("#edit-submitted-province-select-province").val();
			var currentPArray = pRates[currentProvince];
			var ratePer = currentPArray[4] * size;
			$("#custom-field-" + customField + "-rate").val(ratePer).niceRates();
		}
	});

	$("#custom-field-" + customField + "-entries").change( function () {
		$(this).cleannum();
		var num = parseFloat($(this).attr('value'));
		var rate = parseFloat($("#custom-field-" + customField + "-rate").attr('value'));
		var total = num * rate;

		//add commas
		$(this).digits();

		//if (total > 0) { // they can be negative numbers
			if (check_decimals(total, 2, 9999)) {
				total = roundNumber(total, 2);
			}

			total = numberToFixed(total, 2);

			$("#custom-field-" + customField + "-remittance").val(total);

			do_hidden_update();
		//}

	});



	return false;
}

function getCustomField(){
	var customField = 0;
	if( $(".custom-size-fieldset").size() >  0 ){
		var last = $(".custom-size-fieldset:last").attr('id').replace('custom-div-','');
		last++;
		customField = last;
	}
	return customField;
}

function remove_field(num) {
	
	//remove the items from the array
	for (var field in fieldsArray) {
		if (fieldsArray[field] == "custom-field-" + num) {
			fieldsArray.splice(field, 1);
		}
	}	
	//remove the custom fields
	$("#custom-div-" + num).remove();
	//reset tab index
	Drupal.attachBehaviors($('.node'));
   //update
	do_hidden_update();

	return true;
}

function check_decimals(value,min,max) {
  //Accepts number with decimal but it must have at least the min and at most the max places after the decimal
  var re = new RegExp("^-?\\d+\\.\\d{" + min + "," + max + "}?$");
  return re.test(value);
}

function roundNumber(num, dec) {
	//var result = Math.round(num*Math.pow(10,dec))/Math.pow(10,dec);
	result = Math.round(num*100)/100;
	return result;
}

var numberToFixed = 
(function() {
  return toFixedString;

  function toFixedString(n, digits) {
    var unsigned = toUnsignedString(Math.abs(n), digits);
    return (n < 0 ? "-" : "") + unsigned;
  }

  function toUnsignedString(m, digits) {
    var t, s = Math.round(m * Math.pow(10, digits)) + "",
        start, end;
    if (/\D/.test(s)) { 
      return "" + m;
    }
    s = padLeft(s, 1 + digits, "0");
    start = s.substring(0, t = (s.length - digits));
    end = s.substring(t);
    if(end) {
      end = "." + end;
    }
    return start + end; // avoid "0."
  }
  /** 
   * @param {string} input: input value converted to string.
   * @param {number} size: desired length of output.
   * @param {string} ch: single character to prefix to s.
   */
  function padLeft(input, size, ch) {
    var s = input + "";
    while(s.length < size) {
      s = ch + s;
    }
    return s;
  }
})();

