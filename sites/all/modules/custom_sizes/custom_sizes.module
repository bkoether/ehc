<?php
// $Id$

/**
 * @file
 * TODO: Enter file description here.
 */

/**
 * Returns the previous custom sizes for the EHC Form
 *
 * @param $user
 *  The node ID of the node representing the faculty member
 * @return
 *  Array of custom sizes
 */
function _custom_sizes_get_previous($uid, $type = 'oil') {
 
switch($type){ 
	case 'oil':
		$query = db_query("SELECT d.data 
		  FROM {webform_submitted_data} d 
		  INNER JOIN {webform_submissions} s 
		    ON s.sid = d.sid 
		  WHERE d.cid = '96' AND s.uid = %d
			ORDER BY d.sid DESC
			LIMIT 1", 
		$uid);
		$result = db_fetch_object($query);
		if(count($result) != 0) {
			$sizes = substr($result->data, 0, -1);
			drupal_add_js(array('custom_sizes' => array('prev_sizes' => $sizes )), 'setting');
		}	
		break;
	case 'glycol':
		$query = db_query("SELECT d.data 
		  FROM {webform_submitted_data} d 
		  INNER JOIN {webform_submissions} s 
		    ON s.sid = d.sid 
		  WHERE d.cid = '187' AND s.uid = %d
			ORDER BY d.sid DESC
			LIMIT 1", 
		$uid);
		$result = db_fetch_object($query);
		if(count($result) != 0) {
			$sizes = substr($result->data, 0, -1);
			drupal_add_js(array('custom_sizes' => array('prev_sizes_glycol' => $sizes )), 'setting');
		}	
		break;
}			
		
	if($sizes){	  
			return $sizes;
		}else{
			return FALSE;
		}
	


}



/**
 * Implementation of hook_preprocess_node
 * not sure that i need to push the variable but anyway
 */
function custom_sizes_preprocess_node(&$vars) {
		
	drupal_add_js(drupal_get_path('module', 'custom_sizes') . '/custom_sizes.js');
	global $user;
    $vars['previous_sizes'] = _custom_sizes_get_previous($user->uid, 'oil');   
		$vars['previous_sizes_glycol'] = _custom_sizes_get_previous($user->uid, 'glycol');   
}





/**
 * Implementation of hook_menu().
 */
// function custom_sizes_menu() { 
//   // This is the minimum information you can provide for a menu item.
//   $items['TODO: Enter path'] = array(
//     'title' => 'TODO: Enter menu item title',
//     'page callback' => 'TODO: Enter callback function',
//     'access arguments' => array('TODO: Enter user permissions'),
//   );
//   // more complex menu item
//   $items['TODO: Enter path'] = array(
//     'title' => 'TODO: Enter menu item title',
//     'description' => 'TODO: Enter description',
//     'page callback' => 'TODO: Enter callback function',
//     'page arguments' => '', // An array of arguments to pass to the page callback function. Integer values pass the corresponding URL component.
//     'access callback' => '', // defaults to user_access()
//     'access arguments' => array('TODO: Enter user permissions'),
//     'weight' => 0,
//     'type' => MENU_NORMAL_ITEM, // One of MENU_NORMAL_ITEM / MENU_CALLBACK / MENU_SUGGESTED_ITEM / MENU_LOCAL_TASK / MENU_DEFAULT_LOCAL_TASK
//     'menu_name' => '', // Menu to place this item in.
//     'title callback' => '', // Function to generate the title, defaults to t(). 
//     'title arguments' => '', // Arguments to send to t() or your custom callback. 
//   );
//   // OPTIONAL: Fill in additional static menu items
// 
//   return $items;
// }
// 
// 
// /**
//  * Implementation of hook_block().
//  */
// function custom_sizes_block($op = 'list', $delta = 0, $edit = array()) {
//   switch ($op) {
// 
//     case 'list':
//       $blocks[0]['info'] = t('Block 1');
//       $blocks[1]['info'] = t('Block 2');
//       // OPTIONAL: Add additional block descriptions here, if required.
//       return $blocks;
// 
//     case 'configure':
//       // OPTIONAL: Enter form elements to add to block configuration screen, if required.    
//       if ($delta == 0 && user_access('administer module')) {
//         $form['module_block_1'] = array();
//       }
//       if ($delta == 1 && user_access('administer module')) {
//         $form['module_block_2'] = array();
//       }
//       return $form;
// 
//     case 'save':
//       // OPTIONAL: Add code to trigger when block configuration is saved, if required.
//       if ($delta == 0) {
//         variable_set('module_block_setting_1', $edit['module_block_1']);
//       }
//       if ($delta == 1) {
//         variable_set('module_block_setting_2', $edit['module_block_2']);
//       }
//       break;
// 
//     case 'view':
//       if ($delta == 0) {
//         $block['subject'] = t('Block 1 title');
//         $block['content'] = t('Block 1 content');
//       }
//       if ($delta == 1) {
//         $block['subject'] = t('Block 2 title');
//         $block['content'] = t('Block 2 content');
//       }
//       // OPTIONAL: Enter additional cases for each additional block, if defined.
// 
//       return $block;
//   }    
// }
// 
// 
// /**
//  * Implementation of hook_webform_submission_presave().
//  */
// function custom_sizes_webform_submission_presave($node, &$submission) {
// 
// }

