<?php

function remittance_menu() {

  $items = array();

  $items['admin/settings/remittance'] = array(
    'title' => 'Remittance Rate Settings',
    'description' => 'Per Province Rates & Taxes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('remittance_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
   );

  $items['json/resource-sheet/%/%/%'] = array(
  	'page callback' => 'remittance_json_data',
  	'page arguments' => array(2,3,4),
  	'access callback' => TRUE,
  	'type' => MENU_CALLBACK,
  );

  return $items;
}

function remittance_json_data($province, $start_date, $end_date, $json = TRUE) {
	$start_ts = strtotime($start_date);
	$end_ts = strtotime($end_date);

	// $query = "SELECT n.nid AS nid, p.field_province_value AS province, d.field_start_date_value AS start_date
	$query = "SELECT n.nid
		FROM {node} n
		LEFT JOIN {content_type_rate_sheet} p ON n.vid = p.vid
		LEFT JOIN {content_type_rate_sheet} d ON n.vid = d.vid
		WHERE n.type = '%s' AND n.status = %d AND p.field_province_value = '%s' AND d.field_start_date_value <= %d
		ORDER BY d.field_start_date_value DESC
		LIMIT 1";
	$start_nid = db_result(db_query($query, 'rate_sheet', 1, $province, $start_ts));
	$end_nid = db_result(db_query($query, 'rate_sheet', 1, $province, $end_ts));

	// $data = array();
	// If we have the same nid we are good to go
	if ($start_nid == $end_nid) {
		$sheet = node_load($start_nid);
		$charges = array(
			'pst' => (float) $sheet->field_pst[0]['value'],
			'gst' => (float) $sheet->field_gst[0]['value'],
			'hst' => (float) ($sheet->field_hst_selector[0]['value'] ? $sheet->field_hst[0]['value'] : 0),
			'oil' => (float) $sheet->field_oil[0]['value'],
			'oil_containers' => (float) $sheet->field_oil_containers[0]['value'],
			'oil_filter_small' => (float) $sheet->field_oil_filter_small[0]['value'],
			'oil_filter_large' => (float) $sheet->field_oil_filter_large[0]['value'],
			'glycol_concentrate' => (float) $sheet->field_glycol_concentrate[0]['value'],
			'glycol_premix' => (float) $sheet->field_glycol_premix[0]['value'],
			'glycol_containers' => (float) $sheet->field_glycol_containers[0]['value'],
		);
    if (isset($sheet->field_oem_utility)) {
      $charges['oem'] = array(
        'automotive' => remittance_prepare_oem($sheet->field_oem_automotive[0]['value'], $charges),
        'electrical' => remittance_prepare_oem($sheet->field_oem_electrical[0]['value'], $charges),
        'forestry' => remittance_prepare_oem($sheet->field_oem_forestry[0]['value'], $charges),
        'construction' => remittance_prepare_oem($sheet->field_oem_construction[0]['value'], $charges),
        'agricultural' => remittance_prepare_oem($sheet->field_oem_agricultural[0]['value'], $charges),
        'utility' => remittance_prepare_oem($sheet->field_oem_utility[0]['value'], $charges),
      );
    }
	}
	else {
		$end_sheet = node_load($end_nid);
		$end_date = date('F j, Y', ($end_sheet->field_start_date[0]['value'] - 86400));
		$charges = array(
			'error' => 'true',
			'start' => date('F j, Y', $start_ts),
			'end' => $end_date,
		);
	}
  if ($json) {
    drupal_json($charges);
  }
  else {
    return $charges;
  }
}

/**
 * Prepares the OEM data for easier use on the remittance forms.
 */
function remittance_prepare_oem($data, $charges) {
  $table = unserialize($data);
  $header = array();
  $rows = array();
  $return = array();

  // Prepare the rows
  foreach ($table as $cell_id => $cell) {
    $id = explode('_', $cell_id);

    // Only do something if it is a cell.
    if ($id[0] == 'cell') {
      if ($id[1] == 0) {
        $header[] = $cell;
      }
      else {
        $rows[$id[1]][] = $cell;
      }
    }

    foreach ($rows as $rid => $row) {
      if(empty($row[0])) {continue;}
      $return[$rid]['title'] = $row[0];
      $return[$rid]['oil'] = empty($row[1]) ? 0 : $row[1];
      $return[$rid]['coolant'] = empty($row[2]) ? 0 : $row[2];
      $return[$rid]['filter_s'] = empty($row[3]) ? 0 : $row[3];
      $return[$rid]['filter_l'] = empty($row[4]) ? 0 : $row[4];
      $return[$rid]['rate'] = empty($row[5]) ? _remittance_calculate_rate($return[$rid], $charges) : $row[5];
      $return[$rid]['info'] = empty($row[6]) ? "" : $row[6];
    }
  }

  return $return;
}

function _remittance_calculate_rate($quantities, $rates) {
  $rate = 0;
  $oil = $quantities['oil'] * $rates['oil'];
  $coolant = $quantities['coolant'] * $rates['glycol_premix'];
  $filter_small = $quantities['filter_s'] * $rates['oil_filter_small'];
  $filter_large = $quantities['filter_l'] * $rates['oil_filter_large'];
  $rate = (float)$oil + (float)$coolant + (float)$filter_small + (float)$filter_large;
  return (string)$rate;
}

// Old Functionality

function remittance_admin() {
	$provinces = array(
		'BC' => 'British Columbia',
		'AB' => 'Alberta',
		//'ON' => 'Ontario',
		//'QC' => 'Quebec',
		'MB' => 'Manitoba',
		'SK' => 'Saskatchewan',
		//'NS' => 'Nova Scotia',
		//'NB' => 'New Brunswick',
		//'NL' => 'Newfoundland And Labrador',
		//'PE' => 'Prince Edward Island',
		//'NT' => 'Northwest Territories',
		//'YT' => 'Yukon',
		//'NU' => 'Nunavut',
	);
	$charges = array(
		'PST' => 0.075,
		'GST' => 0.05,
		'HST' => 0.125,
		'Oil' => 0.05,
		'Oil Containers' => 0.05,
		'Oil Filter <= 8in' => 0.08,
		'Oil Filter > 8in' => 0.08,
		'Oil Filter Sump' => 0.10,
		'Glycol Concentrate' => 0.50,
		'Glycol Premix' => 0.50,
		'Glycol Containers' => 0.50,

	);
	$form = array();

	foreach ($provinces as $short => $long) {
		$form[$short] = array(
			'#type' => 'fieldset',
			'#title' => $long,
		);
		foreach ($charges as $type => $rate) {
			if ($short == 'BC' AND ($type == 'GST' OR $type == 'PST')) {
				continue;
			} else if ($type == 'HST' AND $short != 'BC') {
				continue;
			}
			$name = $type;
			$type = str_replace(" ", "-", $type);
			$type = str_replace("(", "-", $type);
			$type = str_replace(")", "-", $type);
			$type = str_replace(".", "-", $type);
			$form[$short][$short . "_" . $type] = array(
				'#type' => 'textfield',
				'#title' => t($short . " " . $name . " Rate"),
				'#default_value' => variable_get($short . "_" . $type, $rate),
				'#size' => 20,
				'#maxlength' => 20,
			);
		}
	}

	return system_settings_form($form);
}

function remittance_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == "webform_client_form_3") {
		// Add the submit handler after the existing Webform submit handler,
		// but before the second Webform handler. Pop off the first one and add
		// ours second.
		$first = array_shift($form['#submit']);
		array_unshift($form['#submit'], $first, 'remittance_php_client_submit');
	}

  elseif ($form_id == 'rate_sheet_node_form') {
    drupal_add_css(drupal_get_path('module', 'remittance') . '/remittance.css', 'theme');
  }
}

function remittance_php_client_submit($form, &$form_state) {
	foreach ($form_state['values']['submitted'] as $key => $value) {
		if (is_array($value)) {
			$newValue = "";
			foreach ($value as $nKey => $nValue) {
				$newValue .= $nValue.";";
			}
			$form_state['values']['submitted'][$key] = $newValue;
		}
	}
}




/**
*	email alter to add the admin's for each province in as additional emails
*
* Implementation of hook_mail_alter().
**/

function sitename_overrides_mail_alter(&$message) {
  /* Replace to: aliases defined in _modulename_mail_aliases(). */
	drupal_set_message($message);
}









